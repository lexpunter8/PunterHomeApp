@page "/recipes"
@inject Blazored.Modal.Services.IModalService Modal

@using BlazorPunterHomeApp.Data;
@using BlazorPunterHomeApp.ViewModels;
@inject RecipeService RecipeService
@inject ProductService PropductService
@inject NavigationManager NavigationManager
@using DataModels.Helpers;
@using PunterHomeDomain.ApiModels; 
@using PunterHomeDomain.Enums;
@using BlazorPunterHomeApp.Components;

<div class="container-fluid bg-el-1 full-wo-nav">
    <div class="bg-el-0" style="position:absolute; top: 0; right: 0; width: 50%; height:100%; min-height: 100px;">
    </div>
    <div class="container-xl justify-content-center">
        <div class="row p-0 m-0">

            <div class="col-12 col-md-auto bg-el-1 pl-2 pr-5 d-flex flex-column">
                <div style="width:220px" class="p-2 flex-grow-1">
                    <BlazorPunterHomeApp.Components.RecipeFilterComponent RecipeState="State" FiltersChanged="FilterChangedHandler" FilterParameters="FilterParameters"></BlazorPunterHomeApp.Components.RecipeFilterComponent>
                </div>
            </div>

            @*
                recipe card
            *@
        <div class="col-12 col-md bg-el-0">

            @if (myIsCreatingNewRecipe)
            {

            <div class="row p-2 ml-3 bg-el-1 animation" id="newRecipeCollapse">
                <div class="col-12">
                    <label class="h4">Create recipe</label>
                    <EditForm Model="NewRecipeModel" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label>Recipe name</label>
                            <input type="text" @bind-value="NewRecipeModel.Name" class="form-control" id="inputAddress" placeholder="Recipe name">
                        </div>
                        <div class="form-group mb-3">
                            <label>Recipe type</label>
                            <select class="custom-select" id="inputGroupSelect01" @bind="NewRecipeModel.Type">
                                @foreach (var cnt in NewRecipeModel.SelectableUnitQuantityTypes)
                                {
                                    <option value="@cnt">@cnt.GetEnumDescription()</option>
                                }
                            </select>
                        </div>
                        <div class="form-group d-flex justify-content-end p-2">

                            <div >
                                <button class="btn btn-primary" type="submit">Add recipe</button>
                            </div>
                            <div >
                                <button class="ml-2 btn btn-outline-primary"  @onclick="ToggleCreateRecipe">Cancel</button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
            }
            

            <div class="row ml-1 mt-3">
                <div class="col-12 col-md-9">
                    <div class=" input-group">
                        <input type="text" class="form-control" placeholder="Search recipe" id="name" @bind-value="serachText" aria-describedby="button-addon2" />

                        <div class="input-group-append">

                            <button class="btn btn-primary" type="button" @onclick="Search"><Icon Name="IconName.Search"></Icon></button>
                        </div>
                    </div>

                </div>

                <div class="form-group col-12 col-md-3">
                    <select id="inputState" class="form-control">
                        <option selected>Newest</option>
                        <option>A-Z</option>
                        <option>Z-A</option>
                    </select>
                </div>
            </div>

            <div class="row ml-2 mr-2 mt-2">
                <div class="d-flex col-12 justify-content-between">
                    <span class="ml-2 h2">@State.Recipes.Count recipes</span>
                    @if (!myIsCreatingNewRecipe)
                    {

                        <div class="row">
                            <button class="btn btn-primary" type="button" @onclick="ToggleCreateRecipe">
                                Create recipe
                            </button>

                        </div>
                    }
                </div>
                </div>

                <div class="row ml-1">
                    @foreach (var cnt in State.Recipes)
                    {

                        <div class="col-12 col-sm-12 col-md-6 col-lg-6 col-xl-4 mt-4">
                            <a href="@($"recipe/{cnt.Id}")" class="custom-card">
                                <div class="card">
                                    <img class="card-img-top" style="max-height: 120px" src="https://dummyimage.com/200x120/163136/ffffff.png&text=R" />
                                    <div class="card-header bg-el-2">
                                        <div class="d-flex justify-content-around">
                                            <i class="fas fa-clock">info</i>
                                            <i class="fas fa-utensils">@cnt.Type</i>
                                        </div>
                                    </div>
                                    <div class="card-body bg-el-1">
                                        <h6 class="card-title">@cnt.Name</h6>
                                    </div>
                                </div>
                            </a>

                        </div>

                    }
                </div>
            </div>
        </div>

    </div>
</div>


@code {
    private string RecipeAvailableColorString = "69B878";
    private string RecipeUnAvailableColorString = "DB5853";
    private RecipeViewModel RecipeViewModel;
    private NewRecipeValidationModel NewRecipeModel = new NewRecipeValidationModel();
    private string serachText = string.Empty;

    private RecipeModel[] allRecipes = new RecipeModel[0];
    private SearchRecipeParameters FilterParameters = new SearchRecipeParameters();

    private RecipeFilterStateObject State = new RecipeFilterStateObject();

    protected override async Task OnInitializedAsync()
    {
        RecipeViewModel = new RecipeViewModel(PropductService);

        allRecipes = await RecipeViewModel.GetRecipes();
        State.Recipes = allRecipes.ToList();

        RecipeViewModel.PropertyChanged += async (a, b) => await InvokeAsync(() => StateHasChanged());
    }

    private async void HandleSubmit()
    {
        await RecipeViewModel.CreateNewRecipe(NewRecipeModel);
        allRecipes = await RecipeViewModel.GetRecipes();
        State.Recipes = allRecipes.ToList();
        StateHasChanged();

        NavigationManager.NavigateTo($"recipe/{State.Recipes.First(r => r.Name == NewRecipeModel.Name).Id}");

        NewRecipeModel = new NewRecipeValidationModel();
    }

    private ERecipeType selectedType;
    private async void Search()
    {
        FilterParameters.Name = serachText;
        var result = await RecipeViewModel.Search(FilterParameters);
        State.Recipes = result.ToList();
        StateHasChanged();
        State.RaiseChanged();
    }

    private void TypeClicked(ERecipeType type)
    {
        selectedType = type;
    }

    private bool myIsCreatingNewRecipe;
    private void ToggleCreateRecipe()
    {
        if (myIsCreatingNewRecipe)
        {
            NewRecipeModel = new NewRecipeValidationModel();
        }
        myIsCreatingNewRecipe = !myIsCreatingNewRecipe;
        StateHasChanged();
    }

    private void FilterChangedHandler()
    {
        Search();
    }
}
