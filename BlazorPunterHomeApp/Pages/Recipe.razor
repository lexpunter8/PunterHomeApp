@page "/recipes"
@inject Blazored.Modal.Services.IModalService Modal

@using BlazorPunterHomeApp.Data;
@using BlazorPunterHomeApp.ViewModels;
@inject RecipeService RecipeService
@inject ProductService PropductService
@inject NavigationManager NavigationManager
@using DataModels.Helpers;
@using PunterHomeDomain.ApiModels;
@using PunterHomeDomain.Enums;
@using BlazorPunterHomeApp.Components;

@*<div class="container-fluid bg-el-0 full-wo-nav">
    <div class="bg-el-0" style="position:absolute; top: 0; right: 0; width: 50%; height:100%; min-height: 100px;">
    </div>*@
<div class="container">

    @*<div class="col-12 col-md-3 pl-2 pr-5 d-flex flex-column">
    <div class="d-flex justify-content-center justify-content-md-end">

    <div style="width:220px" class="p-2">
    <BlazorPunterHomeApp.Components.RecipeFilterComponent RecipeState="State" FiltersChanged="FilterChangedHandler" FilterParameters="FilterParameters"></BlazorPunterHomeApp.Components.RecipeFilterComponent>
    </div>
    </div>
    </div>*@
    @*
    recipe card
    *@
    <div class="row mt-3">
        <div class="col-12 col-md-6">

            <span class="h2">Recepten</span>
        </div>
        <div class="col-12 col-md-6 d-flex flex-row-reverse">
            <div class="d-inline-flex flex-row justify-content-md-end">

                <button class="btn btn-outline-primary" type="button" @onclick="ToggleImportRecipe">
                    <i class="fa fa-cloud-arrow-up"></i>
                </button>
                <button class="ml-2 btn btn-primary" type="button" @onclick="ToggleCreateRecipe">
                    Nieuw recept
                </button>

            </div>
        </div>
    </div>

    <ListGroup Class="mt-2">
        @foreach (var cnt in State.Recipes)
        {
            <ListGroupItem>
                <div class="d-flex align-items-center justify-content-between">
                    <NavLink class="text-reset d-flex" href="@($"recipe/{cnt.Id}")">
                        <Div Class="d-flex flex-column">
                            @*<Column ColumnSize="ColumnSize.Is9">*@

                            <Span><Strong>@cnt.Name</Strong></Span>
                            @*</Column>*@

                            @*<Column ColumnSize="ColumnSize.Is3" Class="d-flex justify-content-end">*@

                            @*</Column>*@
                        </Div>
                    </NavLink>
                    <div class="d-flex justify-content-end">
                        @*<button class="btn oval-button-outlined disabled" @onclick="@(() => MoveTo($"recipe/{cnt.Id}"))">
                    <i class="fa-solid fa-basket-shopping"></i>
                    </button>*@
                        <button class="btn oval-button-outlined mx-2" @onclick="@(() => MoveTo($"recipe/edit/{cnt.Id}"))">
                            <i class="fa-solid fa-pen-to-square"></i>
                        </button>
                        <button class="btn oval-button" @onclick="@(() => MoveTo($"cooking/{cnt.Id}"))">
                            <i class="fa-solid fa-bowl-food"></i>
                        </button>
                    </div>
                </div>



            </ListGroupItem>
        }
    </ListGroup>


</div>
@*</div>*@


<Div Class="fixed-bottom fixed-bottom-bar">
    <div class="container">
        @if (myIsCreatingNewRecipe)
        {
            <div class="row p-2 animation d-flex justify-content-center" id="newRecipeCollapse">
                <div class="col-12">

                    <div class="form-group d-flex justify-content-end">
                        <label class="h4">Create recipe</label>
                    </div>
                    <EditForm Model="@NewRecipeModel" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label>Recept naam</label>
                            <ValidationMessage For="@(() => NewRecipeModel.Name)" />
                            <InputText @bind-Value="@NewRecipeModel.Name" class="form-control" />
                        </div>

                        <div class="form-group d-flex justify-content-end">
                            <button class="btn btn-outline-primary" @onclick="ToggleCreateRecipe">Cancel</button>
                            <button class="ml-2 btn btn-primary" type="submit">Aanmaken</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        }
        else if (myIsImportingRecipe)
        {

            <div class="row p-2 animation d-flex justify-content-center" id="newRecipeCollapse">
                <div class="col-12">

                    <div class="form-group d-flex justify-content-start">
                        <label class="h4">Import recept</label>
                    </div>
                    <EditForm Model="@NewRecipeModel" OnValidSubmit="HandleImportSubmit">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label>Url</label>
                            <ValidationMessage For="@(() => ImportRecipeUrl)" />
                            <InputText @bind-Value="ImportRecipeUrl" class="form-control" />
                        </div>

                        <div class="form-group d-flex flex-row justify-content-end">
                            <button class="btn btn-outline-primary" @onclick="ToggleImportRecipe">Cancel</button>
                            <button class="ml-2 btn btn-primary" @onclick="HandleImportSubmit">Importeer</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        }
        else
        {
            <SearchComponent OnSearch="Search" OnSortOrderChanged="Sort" @ref="SearchComponent"></SearchComponent>
        }
    </div>

</Div>

@code {
    private string RecipeAvailableColorString = "69B878";
    private string RecipeUnAvailableColorString = "DB5853";
    private RecipeViewModel RecipeViewModel;
    private NewRecipeValidationModel NewRecipeModel = new NewRecipeValidationModel();
    public string serachText { get; set; } = string.Empty;

    private RecipeModel[] allRecipes = new RecipeModel[0];
    private SearchRecipeParameters FilterParameters = new SearchRecipeParameters();

    private RecipeFilterStateObject State = new RecipeFilterStateObject();
    private SearchComponent SearchComponent { get; set; }

    private string ImportRecipeUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        RecipeViewModel = new RecipeViewModel(PropductService);

        allRecipes = await RecipeViewModel.GetRecipes();
        State.Recipes = allRecipes.ToList();
        Sort(SearchComponent.SortOrder);

        RecipeViewModel.PropertyChanged += async (a, b) => await InvokeAsync(() => StateHasChanged());
    }

    private async void HandleSubmit()
    {
        await RecipeViewModel.CreateNewRecipe(NewRecipeModel);
        allRecipes = await RecipeViewModel.GetRecipes();
        State.Recipes = allRecipes.ToList();
        Sort(SearchComponent.SortOrder);
        StateHasChanged();

        NavigationManager.NavigateTo($"recipe/{State.Recipes.First(r => r.Name == NewRecipeModel.Name).Id}");

        NewRecipeModel = new NewRecipeValidationModel();
    }

    public void Sort(ESortOrder order)
    {
        if (order == ESortOrder.Ascending)
        {
            State.Recipes = State.Recipes.OrderBy(o => o.Name).ToList();
            StateHasChanged();
            return;
        }
        State.Recipes = State.Recipes.OrderByDescending(o => o.Name).ToList();
        StateHasChanged();
    }

    private ERecipeType selectedType;

    public async void Search(SearchModel model)
    {
        FilterParameters.Name = model.SearchText;
        var result = await RecipeViewModel.Search(FilterParameters);
        State.Recipes = result.ToList();
        Sort(SearchComponent.SortOrder);
        StateHasChanged();
        State.RaiseChanged();
    }

    //private async void SearchR()
    //{
    //    FilterParameters.Name = serachText;
    //    var result = await RecipeViewModel.Search(FilterParameters);
    //    State.Recipes = result.ToList();
    //    ChangeSortOrder();
    //    StateHasChanged();
    //    State.RaiseChanged();
    //}

    private void TypeClicked(ERecipeType type)
    {
        selectedType = type;
    }

    private bool myIsCreatingNewRecipe;
    private bool myIsImportingRecipe;
    private void ToggleCreateRecipe()
    {
        if (myIsCreatingNewRecipe)
        {
            NewRecipeModel = new NewRecipeValidationModel();
        }
        myIsImportingRecipe = false;
        myIsCreatingNewRecipe = !myIsCreatingNewRecipe;
        StateHasChanged();
    }


    private void ToggleImportRecipe()
    {
        myIsImportingRecipe = !myIsImportingRecipe;
        myIsCreatingNewRecipe = false;
        StateHasChanged();
    }

    private void FilterChangedHandler()
    {
        Search(SearchComponent.SearchModel);
    }

    private void MoveTo(string page)
    {
        NavigationManager.NavigateTo(page);
    }

    private async void HandleImportSubmit()
    {
        await RecipeViewModel.ImportRecipe(ImportRecipeUrl);
        FilterChangedHandler();
    }
}
