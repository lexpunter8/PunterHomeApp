@page "/products"
@using BlazorPunterHomeApp.Data
@using PunterHomeApp.ApiModels;
@inject ProductService ProductService
<h3>Products</h3>

<EditForm Model="@newProduct" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText placeholder="name" id="name" @bind-Value="newProduct.Name" />
    <InputNumber placeholder="volume quantity" id="quantity" @bind-Value="newProduct.UnitQuantity" />
    <select class="form-control" @bind="newProduct.UnitQuantityType">
        @foreach (string cnt in ProductModel.SelectableUnitQuantityTypes)
        {
            <option value="@cnt">@cnt</option>
        }
    </select>

    <button type="submit">Save</button>

</EditForm>

<div class="row">
    <div class="col-sm-12 col-md-6">
        <ul class="list-group ">
            @foreach (var cnt in products)
            {
                <li class="list-group-item list-group-item-action justify-content-between @((cnt.Id == SelectedProduct?.Id) ? "active" : "")" @onclick="@(e => ItemClick(e, cnt))">
                    @cnt.Name
                    <span class="badge @((cnt.Quantity > 0) ? "badge-info" : "badge-warning") badge-pill">@cnt.Quantity</span>
                </li>

            }
        </ul>
    </div>
    @if (SelectedProduct != null)
    {
<div class="col-sm-12 col-md-6">
    <h4>@SelectedProduct.Name Details</h4>
    <p>@SelectedProduct.Id</p>

    @foreach (var prodQuan in SelectedProduct.ProductQuantities)
    {


        <div class="row">
            <div class="col">
                <p>
                    @prodQuan.UnitQuantityTypeVolume @prodQuan.UnitQuantityType<br>
                    Quantity: @prodQuan.Quantity
                </p>
            </div>
            <div class="col">
                <button class="btn btn-danger" @onclick="@(e => prodQuan.Quantity--)">-</button>
                <button class="btn btn-success" @onclick="@(e => prodQuan.Quantity++)">+</button>
            </div>
        </div>
    }

<div class="row">
    <EditForm Model="@SelectedProduct.NewProductQuantity" OnValidSubmit="HandleAddQuantity">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputNumber placeholder="volume quantity" id="quantity" @bind-Value="SelectedProduct.NewProductQuantity.UnitQuantityTypeVolume" />
        <select @bind="SelectedProduct.NewProductQuantity.UnitQuantityType">
            @foreach (string cnt in ProductModel.SelectableUnitQuantityTypes)
            {
                <option value="@cnt">@cnt</option>
            }
        </select>

        <button type="submit">ADD</button>

    </EditForm>
</div>

    <p>Some info</p>
    <div class="row">
        <button class="btn btn-outline-danger" @onclick="@(e => ProductService.Delete(SelectedProduct))">Delete</button>
        <button class="btn btn-primary" @onclick="@(e => ProductService.Update(SelectedProduct))">Save</button>

    </div>
</div>
    }
</div>

@code {
    public NewProductApiModel newProduct = new NewProductApiModel();
    private ProductModel[] products = new ProductModel[0];

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetForecastAsync();
    }

    private async void HandleSubmit()
    {
        await ProductService.AddProduct(newProduct);
        newProduct = new NewProductApiModel();

        products = await ProductService.GetForecastAsync();
    }

    private async void HandleAddQuantity()
    {
        await ProductService.AddQuantityToProduct(SelectedProduct.NewProductQuantity, SelectedProduct);
        StateHasChanged();
    }

    private ProductModel SelectedProduct;

    private void ItemClick(MouseEventArgs e, ProductModel product)
    {
        SelectedProduct = product;
    }
}
