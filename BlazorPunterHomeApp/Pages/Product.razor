@page "/products"
@using BlazorPunterHomeApp.Data
@using PunterHomeApp.ApiModels;
@using DataModels.Helpers;
@using BlazorPunterHomeApp.ViewModels;
@using BlazorPunterHomeApp.Components;

@inject Blazored.Modal.Services.IModalService Modal
@inject ProductService ProductService
<h3>Products</h3>
<button @onclick="ShowNewProductModal" class="btn btn-primary">New product</button>

<div class="row">
    <div class="col-sm-12 col-md-6">
        <ul class="list-group ">
            @foreach (var cnt in products)
            {
                <li class="list-group-item list-group-item-action justify-content-between @((cnt.Id == SelectedProduct?.CurrentSelectedProduct?.Id) ? "active" : "")" @onclick="@(e => ItemClick(e, cnt))">
                    @cnt.Name
                    <span class="badge @((cnt.Quantity > 0) ? "badge-info" : "badge-warning") badge-pill">@cnt.Quantity</span>
                </li>

            }
        </ul>
    </div>
    @if (SelectedProduct != null)
    {
        <div class="col-sm-12 col-md-6">
            <h4>@SelectedProduct.CurrentSelectedProduct.Name Details</h4>
            <p>@SelectedProduct.CurrentSelectedProduct.Id</p>

            @foreach (var prodQuan in SelectedProduct.CurrentSelectedProduct.ProductQuantities)
            {


                <div class="row">
                    <div class="col">
                        <p>
                            @prodQuan.UnitQuantityTypeVolume @prodQuan.UnitQuantityType<br>
                            Quantity: @prodQuan.Quantity
                        </p>
                    </div>
                    <div class="col">
                        <button class="btn btn-danger" @onclick="@(e => SelectedProduct.ChangeQuantity(-1, prodQuan.Id))">-</button>
                        <button class="btn btn-success" @onclick="@(e => SelectedProduct.ChangeQuantity(1, prodQuan.Id))">+</button>
                        <button class="btn btn-outline-danger" @onclick="@(e => ProductService.DeleteProductQuantity(prodQuan.Id))">delete</button>
                    </div>
                </div>
            }

        <div class="row">

            <button @onclick="ShowAddProductQuantityModal" class="btn btn-primary">New product</button>
        </div>
            <button @onclick="@(() => Modal.Show<ProductComponent>("Product"))" class="btn btn-primary">View</button>
            <p>Some info</p>
            <div class="row">
                <button class="btn btn-outline-danger" @onclick="@(e => ProductService.DeleteProduct(SelectedProduct.CurrentSelectedProduct))">Delete</button>
                <button disabled="@(!(SelectedProduct.IsDirty))" class="btn btn-primary" @onclick="@(e => ProductService.Update(SelectedProduct.CurrentSelectedProduct))">Save</button>
            </div>
        </div>
    }
</div>

@code {
    public NewProductApiModel newProduct = new NewProductApiModel();
    private ProductModel[] products = new ProductModel[0];

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetProducts();
        ProductService.RefreshRequired += async (a, b) =>
        {
            products = await ProductService.GetProducts();

            InvokeAsync(() => StateHasChanged());
        };
    }

    private async void ShowNewProductModal()
    {
        var moviesModal = Modal.Show<NewEditProductComponent>("New product");
        var result = await moviesModal.Result;

    }

    private void ShowAddProductQuantityModal()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(NewEditProductQuantityComponent.Product), SelectedProduct.CurrentSelectedProduct);

        Modal.Show<NewEditProductQuantityComponent>("Add product quantity", parameters);
    }

    private async void HandleSubmit()
    {
        await ProductService.AddProduct(newProduct);
        newProduct = new NewProductApiModel();

        products = await ProductService.GetProducts();
        StateHasChanged();
    }

    private async void HandleAddQuantity()
    {
        await ProductService.AddQuantityToProduct(SelectedProduct.NewProductQuantity, SelectedProduct.CurrentSelectedProduct);
        SelectedProduct.NewProductQuantity = new PunterHomeDomain.Models.ProductQuantity();
        StateHasChanged();
    }

    private BlazorPunterHomeApp.ViewModels.ProductViewModel SelectedProduct;

    private void ItemClick(MouseEventArgs e, ProductModel product)
    {
        if (SelectedProduct == null)
        {
            SelectedProduct = new ViewModels.ProductViewModel(product);
            SelectedProduct.PropertyChanged += (a, b) => StateHasChanged();
        }
        else
        {
            SelectedProduct.SetProduct(product);
        }
        StateHasChanged();
    }
}
