@page "/products"
@using BlazorPunterHomeApp.Data
@using PunterHomeApp.ApiModels;
@using DataModels.Helpers;
@using BlazorPunterHomeApp.ViewModels;
@using static Enums;
@using PunterHomeDomain.Models;
@using BlazorPunterHomeApp.Components;

@inject Blazored.Modal.Services.IModalService Modal
@inject ProductService ProductService
@inject BlazorShoppingListService ShoppingListService
@inject NavigationManager NavigationManager

@inject IBarcodeScannerService barcodeScannerService;


    <div class="container justify-content-center p-0">

        <div class="row p-0 m-0">

            @*<div class="col-12 col-md-3 bg-el-0 pr-5 d-flex flex-column">
                <div class="d-flex justify-content-center justify-content-md-end">

                    <div style="width:220px" class="p-2">
                        <BlazorPunterHomeApp.Components.RecipeFilterComponent RecipeState="State" FiltersChanged="FilterChangedHandler" FilterParameters="FilterParameters"></BlazorPunterHomeApp.Components.RecipeFilterComponent>
                    </div>
                </div>
            </div>*@

            @*
                recipe card
            *@
        <div class="col-12 col-md bg-el-0">
            <div class="container-md">

                @if (myIsCreatingProduct)
                {

                    <div class="row p-2 bg-el-1 animation" id="newRecipeCollapse">
                        <div class="col-12">
                            <label class="h4">Product aanmaken</label>
                            <EditForm Model="NewProductModel" OnValidSubmit="HandleNewProductSubmit">
                                <DataAnnotationsValidator />
                                <div class="form-group">
                                    <label>Product naam</label>
                                    <ValidationMessage For="@(() => NewProductModel.Name)" />
                                    <InputText @bind-Value="NewProductModel.Name" class="form-control" id="inputAddress" placeholder="Product naam" />
                                </div>
                                <div class="form-group">
                                    <label>Barcode</label>
                                    <ValidationMessage For="@(() => NewProductModel.Barcode)" />
                                    <InputText @bind-Value="NewProductModel.Barcode" class="form-control" id="inputAddress" placeholder="Barcode" />
                                </div>
                                <div class="form-group mb-3">
                                    <label>Product hoeveelheid</label>
                                    <ValidationMessage For="@(() => NewProductModel.UnitQuantity)" />
                                    <ValidationMessage For="@(() => NewProductModel.UnitQuantityType)" />
                                    <div class="input-group mb-3">
                                        <InputNumber class="form-control" @bind-Value="NewProductModel.UnitQuantity" />

                                        <InputSelect class="custom-select" id="inputGroupSelect01" @bind-Value="NewProductModel.UnitQuantityType">
                                            @foreach (var cnt in Enum.GetValues(typeof(EUnitMeasurementType)).Cast<EUnitMeasurementType>().ToList())
                                                {
                                                <option value="@cnt">@cnt.GetEnumDescription()</option>
                                                }
                                        </InputSelect>
                                    </div>
                                </div>
                                <div class="form-group d-flex justify-content-end p-2">

                                    <div>
                                        <button class="btn btn-primary mx-2" type="submit">Product toevoegen</button>
                                    </div>
                                    <div>
                                        <button class="btn btn-outline-primary" @onclick="ToggleCreateProduct">Cancel</button>
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                }

                <div class="row mt-3">
                    <div class="col-12">
                        <SearchComponent TextPlaceholder="Zoek product" OnSearch="Search" OnBarcodePressed="ShowNewScanBarcodeModal" ShowBarcodeButton="true" @ref="SearchComponent"></SearchComponent>
                        
                    </div>
                </div>

                <div class="row mt-2">
                    <div class="col-12 col-md-6">

                        <span class="h2">@products.Count Products</span>
                    </div>
                    <div class="col-12 col-md-6">
                        @if (!myIsCreatingProduct)
                        {
                            <div class="d-flex flex-column align-self-stretch align-self-md- justify-content-md-end">

                                <button class="btn btn-primary" type="button" @onclick="ToggleCreateProduct">
                                    Create product
                                </button>
                            </div>

                        }
                    </div>
                </div>

                <div class="row">
                    @foreach (var cnt in products)
                    {
                        <div class="col-12 col-sm-6 col-md-12 col-lg-6 col-xl-4">
                            <a href="@($"product/{cnt.Id}")" class="custom-card">
                                <div class="card" style="margin-top:5px;">
                                    <div class="card-body bg-el-2">
                                        <h5 class="card-title">@cnt.Name</h5>
                                        <ul class="ul-np">
                                            @foreach (var label in cnt.Tags)
                                            {
                                                <li style="margin-left:1px" class="prodruct-tag bg-green">

                                                    <span style="font-size: 12px;font-weight: bold; text-transform: uppercase; color:white">
                                                        @label.Name
                                                    </span>
                                                </li>

                                            }
                                        </ul>

                                    </div>
                                </div>
                            </a>


                        </div>

                    }
                </div>
            </div>
        </div>
        </div>

    </div>

@code {
    public SearchComponent SearchComponent { get; set; }
    public NewProductApiModel newProduct = new NewProductApiModel();
    private List<ProductModel> products = new List<ProductModel>();
    private bool myIsCreatingProduct;
    private NewProductValidationModel NewProductModel = new NewProductValidationModel();

    private async void HandleNewProductSubmit()
    {
        if (string.IsNullOrEmpty(NewProductModel.Name) || NewProductModel.UnitQuantityType == EUnitMeasurementType.None)
        {
            return;
        }
        await ProductService.AddProduct(new NewProductApiModel
        {
            Name = NewProductModel.Name,
            UnitQuantity = NewProductModel.UnitQuantity,
            UnitQuantityType = NewProductModel.UnitQuantityType,
            Barcode = NewProductModel.Barcode
        });
        ToggleCreateProduct();

    }

    private async void ToggleCreateProduct()
    {
        if (myIsCreatingProduct)
        {
            NewProductModel = new NewProductValidationModel();
        }
        myIsCreatingProduct = !myIsCreatingProduct;

        products = await ProductService.GetProducts();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetProducts();
        ProductService.RefreshRequired += async (a, b) =>
        {
            products = await ProductService.GetProducts();

            await InvokeAsync(() => StateHasChanged());
        };
    }

    private async void ShowNewProductModal()
    {
        var moviesModal = Modal.Show<NewEditProductComponent>("New product");
        var result = await moviesModal.Result;

    }

    private async void ShowNewScanBarcodeModal()
    {
        var barcodeResult = await barcodeScannerService.ScanBarcode(Modal);

        if (barcodeResult == null)
        {
            return;
        }

        var id = await ProductService.GetProductIdByBarcode(barcodeResult.Barcode);
        if (id == Guid.Empty)
        {
            NewProductModel.Barcode = barcodeResult.Barcode;
            ToggleCreateProduct();
            return;
        }
        NavigationManager.NavigateTo($"product/{id}");

    }

    private string searchText = string.Empty;
    private async void Refresh()
    {
        products = await ProductService.SearchProducts(SearchComponent.SearchModel.SearchText);
        StateHasChanged();
    }

    public void Search(SearchModel model)
    {
        Refresh();
    }
}
